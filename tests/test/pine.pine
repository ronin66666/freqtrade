

indicator("Nadaraya-Watson Envelope [LuxAlgo]",overlay=true,max_bars_back=1000,max_lines_count=500,max_labels_count=500)

// 用户自定义
length = input.float(500,'Window Size',maxval=500,minval=0)
h      = input.float(8.,'Bandwidth')
mult   = input.float(3.)  //多元
src    = input.source(close,'Source')  //源为收盘价


up_col = input.color(#39ff14,'Colors',inline='col') // 设置上轨颜色
dn_col = input.color(#ff1100,'',inline='col')  // 设置下轨颜色
disclaimer = input(false, 'Hide Disclaimer') // 隐藏免责声明
//----
n = bar_index
var k = 2
var upper = array.new_line(0)  // 创建上轨数组
var lower = array.new_line(0) // 创建下轨数组

// 自定义函数
//l: 线的索引
//x1,y1: 第一个点的K线索引/时间和价格
//x2,y2: 第二个点的K线索引/时间和价格
lset(l,x1,y1,x2,y2,col)=>
    line.set_xy1(l,x1,y1) // 设定第一个点的K线索引/时间和价格
    line.set_xy2(l,x2,y2) // 设定第二个点的K线索引/时间和价格
    line.set_color(l,col) // 设置线的颜色
    line.set_width(l,2)  // 设置线的宽度

// 如果当前k线为k线组的第一条k线，则返回true，否则返回false。
// 类型 series bool
// 备注
// 使用此变量的PineScript代码可以对历史记录和实时数据进行不同的计算。 请注意，使用此变量/函数可能会导致指标重新绘制。
if barstate.isfirst
    for i = 0 to length/k-1  // 0 ~ 249

        // 初始化上下两条线 点数组
        array.push(upper,line.new(na,na,na,na)) // 将na添加到数组中, na表示无效值 x1,y1,x2,y2: k线坐标
        array.push(lower,line.new(na,na,na,na))

//----
line up = na // 创建上轨线
line dn = na // 创建下轨线
//----
cross_up = 0. // 交叉上轨
cross_dn = 0. // 交叉下轨

// 如果当前k线为k线组的最后一条k线，则返回true，否则返回false
if barstate.islast
    y = array.new_float(0) // 创建y轴数组
    
    sum_e = 0.
    for i = 0 to length-1  // 0 ~ 499
        sum = 0.
        sumw = 0.
        
        for j = 0 to length-1 // 0 ~ 499
            //  math.exp(x) 返回e的x次幂, e是一个常数(2.71828), x是幂, 返回值是e的x次幂
            // math.pow(x,y) 返回x的y次幂, x是底数, y是幂, 返回值是x的y次幂
            w = math.exp(-(math.pow(i-j,2)/(h*h*2))) // 高斯核函数, h为带宽, i为当前k线索引, j为当前k线索引, w为权重
            sum += src[j]*w // sum为当前k线的y轴坐标, src[j]为当前k线的收盘价, w为权重
            sumw += w // sumw为权重之和
        
        y2 = sum/sumw // y2为当前k线的y轴坐标, sum为当前k线的y轴坐标, sumw为权重之和
        sum_e += math.abs(src[i] - y2) // sum_e为误差之和, src[i]为当前k线的收盘价, y2为当前k线的y轴坐标
        array.push(y,y2) // 将y2添加到数组中

    mae = sum_e/length*mult // mae为平均绝对误差, sum_e为误差之和, length为窗口大小, mult为多元
    
    for i = 1 to length-1 // 1 ~ 499
        y2 = array.get(y,i) // y2为当前k线的y轴坐标
        y1 = array.get(y,i-1) // y1为上一根k线的y轴坐标
        
        up := array.get(upper,i/k) // up为上轨线
        dn := array.get(lower,i/k) // dn为下轨线
        
        lset(up,n-i+1,y1 + mae,n-i,y2 + mae,up_col) // 设置上轨线的坐标和颜色
        lset(dn,n-i+1,y1 - mae,n-i,y2 - mae,dn_col) // 设置下轨线的坐标和颜色
        
        //设置label, 做空信号
        if src[i] > y1 + mae and src[i+1] < y1 + mae // 如果当前k线的收盘价大于上一根k线的y轴坐标+平均绝对误差, 并且下一根k线的收盘价小于上一根k线的y轴坐标+平均绝对误差
            label.new(n-i,src[i],'▼',color=#00000000,style=label.style_label_down,textcolor=dn_col,textalign=text.align_center)
        //设置label, 做多信号
        if src[i] < y1 - mae and src[i+1] > y1 - mae // 如果当前k线的收盘价小于上一根k线的y轴坐标-平均绝对误差, 并且下一根k线的收盘价大于上一根k线的y轴坐标-平均绝对误差
            label.new(n-i,src[i],'▲',color=#00000000,style=label.style_label_up,textcolor=up_col,textalign=text.align_center)
    
    cross_up := array.get(y,0) + mae // 交叉上轨
    cross_dn := array.get(y,0) - mae // 交叉下轨

alertcondition(ta.crossover(src,cross_up),'Down','Down')
alertcondition(ta.crossunder(src,cross_dn),'Up','Up')

//----
var tb = table.new(position.top_right, 1, 1
  , bgcolor = #35202b)

if barstate.isfirst and not disclaimer
    table.cell(tb, 0, 0, 'Nadaraya-Watson Envelope [LUX] Repaints'
      , text_size = size.small
      , text_color = #cc2f3c)
